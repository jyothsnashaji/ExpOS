alias callno R0;
callno=[[PTBR+2*(SP-5)/512]*512+(SP-5)%512];

alias usersp R1;
usersp=SP;

alias filename R2;
filename=[[PTBR+2*(SP-4)/512]*512+(SP-4)%512];

alias perm R3;
perm=[[PTBR+2*(SP-3)/512]*512+(SP-3)%512];


alias ret R7;
ret=[PTBR+2*(usersp-1)/512]*512+(usersp-1)%512;

[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

breakpoint;//1


if (callno==1) then //create
 [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=1;
 
 R4=1;
 while(R4<60) do
  if([INODE_TABLE+R4*16+1]==filename) then
   [ret]=0;
   [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
   SP=usersp;
   ireturn;
  else
   R4=R4+1;
  endif;
 endwhile;
 
 R4=1;
 while(R4<60) do
  if([INODE_TABLE+R4*16+1]==-1) then
   R5=INODE_TABLE+R4*16;
   [R5+1]=filename;
   [R5]=DATA; //filetype
   [R5+2]=0;  //filesize
   [R5+8]=-1; //disk blocks
   [R5+9]=-1;
   [R5+10]=-1;
   [R5+11]=-1;
   [R5+3]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+3];//userid
   [R5+4]=perm;
    
   R5=ROOT_FILE+R4*8;
   [R5]=filename;
   [R5+1]=0;
   [R5+2]=DATA;
   [R5+3]=[USER_TABLE+[INODE_TABLE+R4*16+3]*2]; //userid
   
   [ret]=0;
   [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
   SP=usersp;
   breakpoint;//2
   ireturn;
   
  else
   R4=R4+1;
  endif;
 endwhile;
 
 [ret]=-1;
 [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
 SP=usersp;
 ireturn; 
    


endif;


if(callno==4) then //delete
 [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=4;
 R4=1;
 while(R4<60) do
  if([INODE_TABLE+R4*16+1]==filename) then
 
   if([INODE_TABLE+R4*16]!=DATA) then
    [ret]=-1;
    break;
   endif;
   
   if([INODE_TABLE+R4*16+4]==0 && [INODE_TABLE+R4*16+3]!=0 && [INODE_TABLE+R4*16+3]!=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+3]) then
    [ret]=-1;
    break;
   endif;
   
   if ([FILE_STATUS_TABLE+R4*4+1]!=-1) then
    [ret]=-2;
     break;
   endif;
  
   
   multipush(R0,R1,R2,R3,R4,R7);
   R1=4;
   R2=R4;
   R3=[SYSTEM_STATUS_TABLE+1];
   call MOD_0;
   multipop(R0,R1,R2,R3,R4,R7);
   

   R5=0;
   while([INODE_TABLE+R4*16+8+R5]!=-1) do
    breakpoint;//2
    if([BUFFER_TABLE+([INODE_TABLE+R4*16+8+R5]%4)*4]==[INODE_TABLE+R4*16+8+R5] && [BUFFER_TABLE+([INODE_TABLE+R4*16+8+R5]%4)*4+1]==1) then
       
    [BUFFER_TABLE+([INODE_TABLE+R4*16+8+R5]%4)*4+1]=0;
    endif;
    breakpoint;//3
    multipush(R0,R1,R2,R3,R4,R5,R7);
    R1=4;
    R2=[INODE_TABLE+R4*16+8+R5];
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_2;
    multipop(R0,R1,R2,R3,R4,R5,R7);
    R5=R5+1;
   endwhile;
   
    [INODE_TABLE+R4*16+1]=-1;
    [ROOT_FILE+R4*8]=-1;
    
    multipush(R0,R1,R2,R3,R4,R7);
    R1=5;
    R2=R4;
    R3=[SYSTEM_STATUS_TABLE+1];
    call MOD_0;
    multipop(R0,R1,R2,R3,R4,R7);
    
   
   breakpoint;//4
  [ret]=0;
  break;
  else
   R4=R4+1;
  endif;
 endwhile;
 
 if (R4==60) then
  [ret]=0;
 endif;
 
 [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
 SP=usersp;
 ireturn; 
endif;

